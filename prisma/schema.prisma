generator kysely {
  provider = "prisma-kysely"
  output   = "../packages/core/src"
  fileName = "db.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Experiment {
  name       String               @id
  createdAt  DateTime             @default(now())
  updatedAt  DateTime?
  rangeStart Int
  rangeEnd   Int
  overrides  ExperimentOverride[]
}

model ExperimentOverride {
  id             Int        @id @default(autoincrement())
  guildId        String
  experimentName String
  experiment     Experiment @relation(fields: [experimentName], references: [name], onDelete: Cascade)

  @@unique([guildId, experimentName])
}

model Incident {
  id         Int      @id @default(autoincrement())
  stack      String
  causeStack String?
  guildId    String?
  createdAt  DateTime @default(now())
  resolved   Boolean  @default(false)
}

enum ModCaseKind {
  Warn
  Timeout
  Kick
  Ban
  Untimeout
  Unban
}

model ModCase {
  id        Int         @id @default(autoincrement())
  guildId   String
  kind      ModCaseKind
  createdAt DateTime    @default(now())
  reason    String
  modId     String
  targetId  String

  referencedBy      CaseReference[]    @relation("caseReferencedBy")
  references        CaseReference[]    @relation("caseReferences")
  ModCaseLogMessage ModCaseLogMessage?
}

model CaseReference {
  referencedById Int
  referencedBy   ModCase @relation("caseReferencedBy", fields: [referencedById], references: [id], onDelete: NoAction)
  referencesId   Int
  references     ModCase @relation("caseReferences", fields: [referencesId], references: [id], onDelete: Cascade)

  @@id([referencedById, referencesId])
}

model ModCaseLogMessage {
  caseId    Int     @id
  modCase   ModCase @relation(fields: [caseId], references: [id], onDelete: Cascade)
  messageId String
  channelId String
}

enum LogWebhookKind {
  Mod
}

model LogWebhook {
  id           Int            @id @default(autoincrement())
  guildId      String
  webhookId    String
  webhookToken String
  threadId     String?
  kind         LogWebhookKind
}

model Settings {
  guildId         String  @id
  reportChannelId String?
}

model Report {
  id              Int     @id @default(autoincrement())
  userId          String
  messageId       String?
  reportMessageId String
  acknowledged    Boolean @default(false)

  reporters Reporter[]
}

model Reporter {
  reportId Int
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  userId   String
  reason   String

  @@id([reportId, userId])
}
